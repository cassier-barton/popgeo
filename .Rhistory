path <- stringr::str_c("https://services1.arcgis.com/ESMARspQHYMw9BZ9/arcgis/rest/services/OA11_WD",
yr,
"_LAD",
yr,
"_EW_LU/FeatureServer/0/query")
}
json <- httr::GET(path,
query = list(where = stringr::str_c("LAD", yr, "CD = '", la, "'"),
outFields = "*",
returnGeometry = "false",
outSR = "4326",
f = "json"))
df <-  jsonlite::fromJSON(rawToChar(json$content))
out <- df$features$attributes %>%
dplyr::select(c(1,2,3,5,6))
}
test <- get_oa2ward_la(la = "E09000001", year = 2020)
View(test)
test <- get_oa2ward_la(la = "E09000001", year = 2016)
get_ward2la <- function(la, year) {
yr <- stringr::str_sub(year, 3)
if year == 2021 {
print("hey")
} else { print "hoy"}
}
get_ward2la <- function(la, year) {
yr <- stringr::str_sub(year, 3)
if year == 2021 {
print("hey")
} else { print "hoy"
}
get_ward2la <- function(la, year) {
yr <- stringr::str_sub(year, 3)
if year == 2021 { print("hey") }
else { print "hoy" }
}
?message
get_ward2la <- function(la, year) {
yr <- stringr::str_sub(year, 3)
if (year == 2021) { message("hey") }
else { message("hoy") }
}
get_ward2la(year = 2021)
get_ward2la(year = 2020)
get_ward2la <- function(la, year) {
yr <- stringr::str_sub(year, 3)
if (year == 2021) { message("Data not yet available via API - visit geoportal.statistics.gov.uk for data")
}  else if (year == 2020) {
path <- stringr::str_c("https://services1.arcgis.com/ESMARspQHYMw9BZ9/arcgis/rest/services/WD_",
yr,
"_LAD",
yr,
"_UK_LU_v2/FeatureServer/0/query")
} else {
path <- stringr::str_c("https://services1.arcgis.com/ESMARspQHYMw9BZ9/arcgis/rest/services/WD_",
yr,
"_LAD",
yr,
"_UK_LU/FeatureServer/0/query")
}
json <- httr::GET(path,
query = list(where = stringr::str_c("LAD", yr, "CD = '", la, "'"),
outFields = "*",
returnGeometry = "false",
outSR = "4326",
f = "json"))
df <-  jsonlite::fromJSON(rawToChar(json$content))
out <- df$features$attributes %>%
dplyr::select(c(1,2,3,5,6))
}
test <- getward2la("E09000001")
test <- get_ward2la(la = "E09000001", year = 2019)
test <- get_ward2la(la = "E09000001", year = 2020)
get_ward2la <- function(la, year) {
yr <- stringr::str_sub(year, 3)
if (year == 2020) {
path <- stringr::str_c("https://services1.arcgis.com/ESMARspQHYMw9BZ9/arcgis/rest/services/WD_",
yr,
"_LAD",
yr,
"_UK_LU_v2/FeatureServer/0/query")
} else {
path <- stringr::str_c("https://services1.arcgis.com/ESMARspQHYMw9BZ9/arcgis/rest/services/WD_",
yr,
"_LAD",
yr,
"_UK_LU/FeatureServer/0/query")
}
json <- httr::GET(path,
query = list(where = stringr::str_c("LAD", yr, "CD = '", la, "'"),
outFields = "*",
returnGeometry = "false",
outSR = "4326",
f = "json"))
df <-  jsonlite::fromJSON(rawToChar(json$content))
out <- df$features$attributes %>%
dplyr::select(c(1,2,3,5,6))
}
test <- get_ward2la(la = "E09000001", year = 2020)
get_ward2la <- function(la, year) {
yr <- stringr::str_sub(year, 3)
if (year == 2020) {
path <- stringr::str_c("https://services1.arcgis.com/ESMARspQHYMw9BZ9/arcgis/rest/services/WD_",
yr,
"_LAD",
yr,
"_UK_LU_v2/FeatureServer/0/query")
} else {
path <- stringr::str_c("https://services1.arcgis.com/ESMARspQHYMw9BZ9/arcgis/rest/services/WD_",
yr,
"_LAD",
yr,
"_UK_LU/FeatureServer/0/query")
}
json <- httr::GET(path,
query = list(where = stringr::str_c("LAD", yr, "CD = '", la, "'"),
outFields = "*",
returnGeometry = "false",
outSR = "4326",
f = "json"))
df <-  jsonlite::fromJSON(rawToChar(json$content))
out <- df$features$attributes %>%
dplyr::select(c(1,2,3,4))
}
test <- get_ward2la(la = "E09000001", year = 2020)
yr == 19
yr <- 19
yr
path <- stringr::str_c("https://services1.arcgis.com/ESMARspQHYMw9BZ9/arcgis/rest/services/WD_",
yr,
"_LAD",
yr,
"_UK_LU/FeatureServer/0/query")
path
get_ward2la <- function(la, year) {
yr <- stringr::str_sub(year, 3)
if (year == 2020) {
path <- stringr::str_c("https://services1.arcgis.com/ESMARspQHYMw9BZ9/arcgis/rest/services/WD",
yr,
"_LAD",
yr,
"_UK_LU_v2/FeatureServer/0/query")
} else {
path <- stringr::str_c("https://services1.arcgis.com/ESMARspQHYMw9BZ9/arcgis/rest/services/WD",
yr,
"_LAD",
yr,
"_UK_LU/FeatureServer/0/query")
}
json <- httr::GET(path,
query = list(where = stringr::str_c("LAD", yr, "CD = '", la, "'"),
outFields = "*",
returnGeometry = "false",
outSR = "4326",
f = "json"))
df <-  jsonlite::fromJSON(rawToChar(json$content))
out <- df$features$attributes %>%
dplyr::select(c(1,2,3,4))
}
test <- get_ward2la(la = "E09000001", year = 2020)
View(test)
get_ward2la <- function(la, year) {
yr <- stringr::str_sub(year, 3)
if (year == 2020) {
path <- stringr::str_c("https://services1.arcgis.com/ESMARspQHYMw9BZ9/arcgis/rest/services/WD",
yr,
"_LAD",
yr,
"_UK_LU_v2/FeatureServer/0/query")
} else {
path <- stringr::str_c("https://services1.arcgis.com/ESMARspQHYMw9BZ9/arcgis/rest/services/WD",
yr,
"_LAD",
yr,
"_UK_LU/FeatureServer/0/query")
}
json <- httr::GET(path,
query = list(where = stringr::str_c("LAD", yr, "CD = '", la, "'"),
outFields = "*",
returnGeometry = "false",
outSR = "4326",
f = "json"))
df <-  jsonlite::fromJSON(rawToChar(json$content))
out <- df$features$attributes
}
test <- get_ward2la(la = "E09000001", year = 2020)
View(test)
get_ward2la <- function(la, year) {
yr <- stringr::str_sub(year, 3)
if (year == 2020) {
path <- stringr::str_c("https://services1.arcgis.com/ESMARspQHYMw9BZ9/arcgis/rest/services/WD",
yr,
"_LAD",
yr,
"_UK_LU_v2/FeatureServer/0/query")
} else {
path <- stringr::str_c("https://services1.arcgis.com/ESMARspQHYMw9BZ9/arcgis/rest/services/WD",
yr,
"_LAD",
yr,
"_UK_LU/FeatureServer/0/query")
}
json <- httr::GET(path,
query = list(where = stringr::str_c("LAD", yr, "CD = '", la, "'"),
outFields = "*",
returnGeometry = "false",
outSR = "4326",
f = "json"))
df <-  jsonlite::fromJSON(rawToChar(json$content))
out <- df$features$attributes %>%
dplyr::select(c(1,2,3,4))
}
test <- get_ward2la(la = "E09000001", year = 2017)
View(test)
get_ward2la <- function(la, year) {
yr <- stringr::str_sub(year, 3)
if (year == 2020) {
path <- stringr::str_c("https://services1.arcgis.com/ESMARspQHYMw9BZ9/arcgis/rest/services/WD",
yr,
"_LAD",
yr,
"_UK_LU_v2/FeatureServer/0/query")
} else {
path <- stringr::str_c("https://services1.arcgis.com/ESMARspQHYMw9BZ9/arcgis/rest/services/WD",
yr,
"_LAD",
yr,
"_UK_LU/FeatureServer/0/query")
}
json <- httr::GET(path,
query = list(where = stringr::str_c("LAD", yr, "CD = '", la, "'"),
outFields = "*",
returnGeometry = "false",
outSR = "4326",
f = "json"))
df <-  jsonlite::fromJSON(rawToChar(json$content))
out <- df$features$attributes %>%
dplyr::select(c(1,2,3,4))
}
test <- get_ward2la(la = "E09000001", year = 2016)
View(test)
test <- get_ward2la(la = "E09000001", year = 2018)
View(test)
test <- get_ward2la(la = "E09000001", year = 2019)
View(test)
View(test)
cols <- c(stringr::str_c("WD", yr, "CD"),
stringr::str_c("WD", yr, "NM"),
stringr::str_c("LAD", yr, "CD"),
stringr::str_C("LAD", yr, "NM"))
cols <- c(stringr::str_c("WD", yr, "CD"),
stringr::str_c("WD", yr, "NM"),
stringr::str_c("LAD", yr, "CD"),
stringr::str_c("LAD", yr, "NM"))
cols
get_ward2la <- function(la, year) {
yr <- stringr::str_sub(year, 3)
if (year == 2020) {
path <- stringr::str_c("https://services1.arcgis.com/ESMARspQHYMw9BZ9/arcgis/rest/services/WD",
yr,
"_LAD",
yr,
"_UK_LU_v2/FeatureServer/0/query")
} else {
path <- stringr::str_c("https://services1.arcgis.com/ESMARspQHYMw9BZ9/arcgis/rest/services/WD",
yr,
"_LAD",
yr,
"_UK_LU/FeatureServer/0/query")
}
json <- httr::GET(path,
query = list(where = stringr::str_c("LAD", yr, "CD = '", la, "'"),
outFields = "*",
returnGeometry = "false",
outSR = "4326",
f = "json"))
df <-  jsonlite::fromJSON(rawToChar(json$content))
cols <- c(stringr::str_c("WD", yr, "CD"),
stringr::str_c("WD", yr, "NM"),
stringr::str_c("LAD", yr, "CD"),
stringr::str_c("LAD", yr, "NM"))
out <- df$features$attributes %>%
dplyr::select(dplyr::any_of(cols))
}
test <- get_ward2la(la = "E09000001", year = 2019)
View(test)
test <- get_ward2la(la = "E09000001", year = 2016)
View(test)
test <- get_ward2la(la = "E09000001", year = 2017)
View(test)
test <- get_ward2la(la = "E09000001", year = 2018)
test <- get_ward2la(la = "E09000001", year = 2019)
View(test)
test <- get_ward2la(la = "E09000001", year = 2020)
View(test)
get_ward2con <- function(con, year) {
yr <- stringr::str_sub(year, 3)
if (year == 2020) {
path <- stringr::str_c("https://services1.arcgis.com/ESMARspQHYMw9BZ9/arcgis/rest/services/WD",
yr,
"_PCON",
yr,
"_LAD",
yr,
"_UK_LU_v2/FeatureServer/0/query")
} else {
path <- stringr::str_c("https://services1.arcgis.com/ESMARspQHYMw9BZ9/arcgis/rest/services/WD",
yr,
"_PCON",
yr,
"_LAD",
yr,
"_UK_LU/FeatureServer/0/query")
}
json <- httr::GET(path,
query = list(where = stringr::str_c("PCON", yr, "CD = '", pcon, "'"),
outFields = "*",
returnGeometry = "false",
outSR = "4326",
f = "json"))
df <-  jsonlite::fromJSON(rawToChar(json$content))
cols <- c(stringr::str_c("WD", yr, "CD"),
stringr::str_c("WD", yr, "NM"),
stringr::str_c("PCON", yr, "CD"),
stringr::str_c("PCON", yr, "NM"))
out <- df$features$attributes %>%
dplyr::select(dplyr::any_of(cols))
}
test2 <- get_ward2con(con = "E14000639", year = 2020)
get_ward2con <- function(con, year) {
yr <- stringr::str_sub(year, 3)
if (year == 2020) {
path <- stringr::str_c("https://services1.arcgis.com/ESMARspQHYMw9BZ9/arcgis/rest/services/WD",
yr,
"_PCON",
yr,
"_LAD",
yr,
"_UK_LU_v2/FeatureServer/0/query")
} else {
path <- stringr::str_c("https://services1.arcgis.com/ESMARspQHYMw9BZ9/arcgis/rest/services/WD",
yr,
"_PCON",
yr,
"_LAD",
yr,
"_UK_LU/FeatureServer/0/query")
}
json <- httr::GET(path,
query = list(where = stringr::str_c("PCON", yr, "CD = '", con, "'"),
outFields = "*",
returnGeometry = "false",
outSR = "4326",
f = "json"))
df <-  jsonlite::fromJSON(rawToChar(json$content))
cols <- c(stringr::str_c("WD", yr, "CD"),
stringr::str_c("WD", yr, "NM"),
stringr::str_c("PCON", yr, "CD"),
stringr::str_c("PCON", yr, "NM"))
out <- df$features$attributes %>%
dplyr::select(dplyr::any_of(cols))
}
test2 <- get_ward2con(con = "E14000639", year = 2020)
View(test2)
test2 <- get_ward2con(con = "E14000639", year = 2016)
View(test2)
test2 <- get_ward2con(con = "E14000639", year = 2017)
View(test2)
test2 <- get_ward2con(con = "E14000639", year = 2018)
View(test2)
test2 <- get_ward2con(con = "E14000639", year = 2019)
View(test2)
setwd("C:/Users/bartonc/OneDrive - UK Parliament/R/package_development/popgeo")
library(devtools)
document()
setwd("C:/Users/bartonc/OneDrive - UK Parliament/R/package_development")
library(devtools)
install("popgeo")
library(popgeo)
?get_ward2con
test <- get_ward2con(la = "E14000639", year = 2019)
test <- get_ward2con(con = "E14000639", year = 2019)
test <- get_ward2con(con = "E14000703", year = 2019)
View(test)
?get_ward2la
test2 <- get_ward2la(la = "E09000001", year = 2019)
View(test2)
test2 <- get_ward2la(la = "E09000003", year = 2019)
View(test2)
test2 <- get_ward2la(la = "E09000003", year = 2020)
View(test2)
con2rn
devnat_las
get_la2n(year = 2020)
a <- get_la2n(year = 2020)
a
?devnat_las
devnat_las
setwd("C:/Users/bartonc/OneDrive - UK Parliament/R/package_development/popgeo")
geo_types <- read_csv("C:/Users/bartonc/OneDrive - UK Parliament/R/projects/nomis-functions/inputs/ons_codes_lookup.csv")
usethis::use_data(geo_types, overwrite = TRUE)
###
census_menu <- read_csv("C:/Users/bartonc/OneDrive - UK Parliament/R/projects/nomis-functions/inputs/census_table_lookup.csv")
usethis::use_data(census_menu, overwrite = TRUE)
###
con2rn <- read_csv("C:/Users/bartonc/OneDrive - UK Parliament/R/projects/nomis-functions/inputs/constituency_region_lookup.csv")
usethis::use_data(con2rn, overwrite = TRUE)
library(tidyverse)
geo_types <- read_csv("C:/Users/bartonc/OneDrive - UK Parliament/R/projects/nomis-functions/inputs/ons_codes_lookup.csv")
usethis::use_data(geo_types, overwrite = TRUE)
###
census_menu <- read_csv("C:/Users/bartonc/OneDrive - UK Parliament/R/projects/nomis-functions/inputs/census_table_lookup.csv")
usethis::use_data(census_menu, overwrite = TRUE)
###
con2rn <- read_csv("C:/Users/bartonc/OneDrive - UK Parliament/R/projects/nomis-functions/inputs/constituency_region_lookup.csv")
usethis::use_data(con2rn, overwrite = TRUE)
setwd("C:/Users/bartonc/OneDrive - UK Parliament/R/package_development/popgeo")
library(devtools)
document()
setwd("C:/Users/bartonc/OneDrive - UK Parliament/R/package_development")
library(devtools)
install("popgeo")
library(popgeo)
devnat_las
con2rn
library(devtools)
install_github("ropensci/nomisr")
library(nomisr)
a <- nomis_get_data(id = "NM_2010_1", geography = "E34003718", date = "latest")
a <- nomis_get_data(id = "NM_2010_1", geography = "1656752916", date = "latest")
b <- nomis_get_metadata(id = "NM_2010_1", "GEOGRAPHY", type = "type297")
library(nomisr)
getwd()
setwd("C:/R/package_development")
library(devtools)
install("popgeo")
library(popgeo)
a <- c11_cob_uk("E09000001")
library(janitor)
library(tidyverse)
a <- c11_cob_uk("E09000001")
library(nomisr)
?nomis_get_data
# Return data on Jobseekers Allowance for each country in the UK
jobseekers_country <- nomis_get_data(
id = "NM_1_1", time = "latest",
geography = "TYPE499",
measures = c(20100, 20201), sex = 5
)
setwd("C:/R/package_development/popgeo")
library(devtools)
document()
setwd("C:/R/package_development")
library(devtools)
install("popgeo")
library(popgeo)
la_changes
?la_changes
setwd("C:/R/package_development/popgeo")
library(devtools)
document()
la_changes <- read_csv("C:/R/projects/nomis-functions/inputs/la_change_lookup.csv")
usethis::use_data(la_changes, overwrite = TRUE)
la_changes <- read_csv("C:/R/projects/nomis-functions/inputs/la_change_lookup.csv")
usethis::use_data(la_changes, overwrite = TRUE)
library(readr)
la_changes <- read_csv("C:/R/projects/nomis-functions/inputs/la_change_lookup.csv")
usethis::use_data(la_changes, overwrite = TRUE)
setwd("C:/R/package_development/popgeo")
library(devtools)
document()
setwd("C:/R/package_development")
library(devtools)
install("popgeo")
library(popgeo)
la_changes
View(la_changes)
?la_changes
setwd("C:/R/package_development/popgeo")
library(devtools)
document()
setwd("C:/R/package_development")
library(devtools)
install("popgeo")
install("popgeo")
library(popgeo)
a <- find_censustable("KS201EW")
library(stringr)
library(tidyverse)
?first
?select
setwd("C:/R/package_development/popgeo")
library(devtools)
document()
setwd("C:/R/package_development")
library(devtools)
install("popgeo")
library(popgeo)
a <- find_censustable("KS201EW")
b <- get_c11_uk(title = "KS201EW", geog = "E09000001")
library(nomisr)
?nomis_get_data
# Return data on Jobseekers Allowance for each country in the UK
jobseekers_country <- nomis_get_data(
id = "NM_1_1", time = "latest",
geography = "TYPE499",
measures = c(20100, 20201), sex = 5
)
library(popgeo)
test <- c11_cob_uk("E09000001")
.libPaths()
.libPaths()
